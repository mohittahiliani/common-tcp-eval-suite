.. include:: replace.txt
.. highlight:: cpp

Tmix Traffic Generator
----------------------

The introduction to Tmix traffic generator.


Overview of the Tmix model
**************************

Tmix is a traffic generator that generates realistic synthetic traffic in a 
closed loop fashion.The traffic generated by tmix is a "look like" of the 
traffic found on actual networks.
A Packet header trace file is taken as an input to the tmix system captured 
from a real network link.The trace is “reverse compiled” into a source-level
characterization, called a connection vector.


Design
======

Tmix consists of outbound initiator/acceptor node pair, inbound initiator/
acceptor node pair and a pair of delaybox nodes.


              (II) node                        node (IA)
                       \                     / 
                         delaybox -- delaybox
                       /                     \
              (OA) node                        node (OI)


             II - Inbound initiator
             IA - Inbound acceptor
             OI - Outbound initiator
             OA - Outbound acceptor


Each initiator node represents several TCP connections as defined in 
outbound and inbound files.A TCP connection is called as a connection vector.
Connection vectors are represented through a pattern of application data units 
(ADUs). Connection vector shows how the initiator and the acceptor exchanges the 
series of data-unit. Data units are not packets or TCP segments whereas they
are the objects or the protocol elements defined by the application and the
application protocol.The traffic flows from initiator to acceptor in each pair.
The delaybox is introduced to simulate RTTs, bottlenecks and lossrate for the
connections which makes the traffic more realistic.



Tmix Model
**********

We can represent a pattern for ADU (application data unit), in essence, 
Ci=<E1,E2...Ek> consisting of a set of epochs Ei=(ai,bi,ti) where ai is the
size of the ADU sent from initiator to acceptor,bi is the size of the ADU sent
from acceptor to initiator and ti represents the time required to respond 
(response time) between the initiator and the acceptor and visa-versa.

 
Inbound cvec
============

S 3412 1 21217 555381
w 64800 6432
r 1118156
l 0.000000 0.000000
I 0 0 253
A 0 123693 510
A 6308497 0 0


This is a minute part of the packet header trace file, where S represents  
Sequential order, w represents Window size, r represents minimum RTT, l is
loss rate, I for the initiator and A for the acceptor.
The inbound specifed sequential connection should be initiated at 3412 ms 
and the connection has 1 epoch 21217 and 555381 being the unique IDs for 
initiator and acceptor. 64800 and 6432 is the maximum window size of the
initiator and the acceptor nodes, initiator sends 253 bytes  acceptor waits
123693 ms and then sends 510 bytes, acceptor waits 6.3 sec after send then
sends FIN.

Sequential Connections
######################

Sequential connection vectors are the most common and represent a 
request-reply type connection, where a new ADU is sent only after the previous
ADU has been received.The ADU that has a 0 value for time is sent as soon as 
the connection is established.All the sends only occur after the initiator 
or acceptor application has received the expected amount of data from 
the peers (initiator or the acceptor) and after some delay specified by
the next ADU to be sent.The expected amount of data to be received from
the peer is based on the size of the current ADU that was sent by the peer
application.


Concurrent connections
######################

There are another connection namely concurrent connection.In concurrent
connection, new ADUs are sent some time after the previous ADU 
was sent and do not depend upon when ADUs were received. In concurrent
connection vectors unlike sequential connection vector there is no implied 
sequence between the a's and b's in epochs.Both a and b can transmit the data
concurrently.




Scope and Limitations
=====================

Scope being for simulations and experiments that require real-world like 
traffic. And, limitations being lack of flexibilty on defining what kind of 
traffic to be used.


References
==========

Michele C. Weigle, Prashanth Adurthi, Félix Hernández-Campos,
Kevin Jeffay, F. Donelson Smith : Tmix: A Tool for Generating Realistic TCP
Application Workloads in ns-2.

